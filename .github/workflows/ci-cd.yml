name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'adopt'
          cache: maven
      - name: Build with Maven
        run: mvn -B package --file pom.xml

#      - name: Build & push Docker image
#        uses: mr-smithers-excellent/docker-build-push@v5
#        with:
#          image: javatechie/springboot-images-new
#          tags: latest
#          registry: docker.io
#          dockerfile: Dockerfile
#          username: ${{ secrets.DOCKER_USERNAME }}
#          password: ${{ secrets.DOCKER_PASSWORD }}

#
#  test:
#    name: Unit tests
#    #Run on Ubuntu using the latest version
#    runs-on: ubuntu-latest
#    #Job's steps
#    steps:
#      #Check-out your repository under $GITHUB_WORKSPACE, so your workflow can access it
#      - uses: actions/checkout@v1
#      #Set up JDK 11
#      - name: Set up JDK
#        uses: actions/setup-java@v1
#        with:
#          java-version: '11'
#      #Set up Maven cache
#      - name: Cache Maven packages
#        #This action allows caching dependencies and build outputs to improve workflow execution time.
#        uses: actions/cache@v1
#        with:
#          path: ~/.m2
#          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
#          restore-keys: ${{ runner.os }}-m2
#      #Run Tests
#      - name: Run Tests
#        run: mvn -B test
#
#  maven:
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v3
#      - name: Set up JDK 11
#        uses: actions/setup-java@v3
#        with:
#          java-version: '11'
#          distribution: 'adopt'
#          cache: maven
#      - name: Build with Maven
#        run: mvn -B package --file pom.xml

#  dockerize:
#    name: Dockerize Spring Project
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v2
#      - name: Build the Docker image
#        run: docker build -t myorg/myapp --file user/controller/Dockerfile .

